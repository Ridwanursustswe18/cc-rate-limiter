#!/usr/bin/env node

const app = require('../app');
const debug = require('debug')('rate-limiter:server');
const http = require('http');
const cluster = require('cluster');

const BASE_PORT = 3000;
const NUM_SERVERS = 3;

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) return val;
  if (port >= 0) return port;
  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error, port) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening(server) {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log(`Server listening on ${bind} with PID: ${process.pid}`);
}

if (cluster.isPrimary) {
  console.log(`Primary ${process.pid} is starting ${NUM_SERVERS} servers...`);

  for (let i = 0; i < NUM_SERVERS; i++) {
    const port = BASE_PORT + i;
    const worker = cluster.fork({ PORT: port });
    console.log(`Starting server on port ${port}`);
  }

  cluster.on('exit', (worker, code, signal) => {
    const workerPort = worker.process.env.PORT;
    console.log(`Server on port ${workerPort} (PID: ${worker.process.pid}) died`);
    const newWorker = cluster.fork({ PORT: workerPort });
    console.log(`Restarting server on port ${workerPort}`);
  });

} else {
  // Workers start their individual servers
  const port = normalizePort(process.env.PORT || BASE_PORT);
  app.set('port', port);

  const server = http.createServer(app);

  server.listen(port);
  server.on('error', (error) => onError(error, port));
  server.on('listening', () => onListening(server));
}

// Handle graceful shutdown
process.on('SIGTERM', () => {
  console.log('Received SIGTERM. Performing graceful shutdown...');
  if (cluster.isPrimary) {
    for (const id in cluster.workers) {
      cluster.workers[id].kill();
    }
  }
  process.exit(0);
});